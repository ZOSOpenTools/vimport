diff --git a/src/os_unix.c b/src/os_unix.c
index 237171b4f..8ce6bd0e7 100644
--- a/src/os_unix.c
+++ b/src/os_unix.c
@@ -1427,7 +1427,7 @@ mch_init(void)
 
     out_flush();
 
-#ifdef SIGTSTP
+#if defined(SIGTSTP) && !defined(__MVS__)
     // Check whether we were invoked with SIGTSTP set to be ignored. If it is
     // that indicates the shell (or program) that launched us does not support
     // tty job control and thus we should ignore that signal. If invoked as a
@@ -1681,6 +1681,203 @@ mch_input_isatty(void)
     return FALSE;
 }
 
+#ifdef __MVS__
+
+    #define MVS_DATASET_MAGIC_FD (32766)
+    #define MVS_DATASET_MAX (56) /* 44 characters plus ( plus 8 character member name plus ) plus // at the start */
+
+    FILE* 
+zos_fopen(const char* fname, const char* mode)
+{
+   FILE* fp = fopen(fname, mode);
+   fprintf(stderr, "fopen %s with mode %s returns %p\n", fname, mode, fp);
+   return fp;
+}
+
+static int
+getmaxlrecl(const char* dataset) 
+{
+    return 80; /* change to fopen dataset, do finfo, get lrecl, -1 if unable to open */
+}
+
+struct FP2FDEntry {
+    int fd;
+    FILE* fp;
+};
+
+static struct FP2FDEntry static_descriptor[16] = { {0} };
+static int
+addfp(FILE* fp) 
+{
+    int entry;
+    for (entry=0; entry<sizeof(static_descriptor)/sizeof(struct FP2FDEntry); ++entry) {
+	if (!static_descriptor[entry].fd) { /* found an empty slot */
+	    static_descriptor[entry].fd = MVS_DATASET_MAGIC_FD-entry;
+	    static_descriptor[entry].fp = fp;
+	    return static_descriptor[entry].fd;
+	}
+   }
+   fprintf(stderr, "Ran out of slots for open MVS datasets\n");
+   return 0;
+}
+
+static FILE*
+fd2fp(int fd) 
+{
+    int i;
+    for (i=0; i<sizeof(static_descriptor)/sizeof(struct FP2FDEntry); ++i) {
+	if (static_descriptor[i].fd == fd) {
+	    return static_descriptor[i].fp;
+	}
+    }
+    return NULL;
+}
+static int
+fp2fd(FILE* fp) 
+{
+    int i;
+    for (i=0; i<sizeof(static_descriptor)/sizeof(struct FP2FDEntry); ++i) {
+	if (static_descriptor[i].fp == fp) {
+	    return static_descriptor[i].fd;
+	}
+    }
+    return -1;
+}
+    int
+zos_open(const char* pathname, int flags, mode_t mode)
+{
+    int fd;
+    if (pathname[0] == '/' && pathname[1] != '/' && strchr(pathname, '(')) {
+	ctrace("zos_open");
+    }
+    if (pathname[0] == '/' && pathname[1] == '/') {
+	char* parenpos;
+	int lrecl;
+	FILE* fp;
+	if (strlen(pathname) > MVS_DATASET_MAX) {
+	    errno=ENAMETOOLONG;
+	    return -1; /* fail the open */
+	}
+
+	/* this is a dataset, not a UNIX file */
+	if ((parenpos = strchr(pathname, '('))) {
+	    char pds[MVS_DATASET_MAX+1];
+	    memcpy(pds, pathname, parenpos-pathname);
+	    pds[parenpos-pathname] = '\0';
+	    /* this is a PDS member */
+	    lrecl=getmaxlrecl(pds);
+	} else {
+	    lrecl=getmaxlrecl(pathname);
+	}
+	if (lrecl < 0) {
+	    fprintf(stderr, "Dataset %s does not exist. vim failing\n", pathname);
+	    errno=ENOENT;
+	    return -1; /* fail the open if the dataset does not exist yet - restriction on vim at this time */
+	}
+	if (flags & O_RDONLY) {
+	    fp = fopen(pathname, "r"); 
+	    fprintf(stderr, "Open %s for read returns %p\n", pathname, fp);
+	} else if (flags & O_WRONLY) {
+	    fp = fopen(pathname, "w");
+	    fprintf(stderr, "Open %s for read returns %p\n", pathname, fp);
+	} else {
+	    fprintf(stderr, "Only support for read or write for a dataset. flags:0x%x\n", flags);
+	    return -1;
+	}
+	if (!fp) {
+	    perror("Unable to open dataset");
+	    fprintf(stderr, "Unable to open dataset %s. vim failing\n", pathname);
+	    return -1; /* fail the open if underlying fopen fails */
+	}
+	if (addfp(fp)) {
+	    return -1;
+	}
+	fd = fp2fd(fp);
+    } else {
+	fd = open(pathname, flags, mode);
+    }
+    fprintf(stderr, "open %s with flags 0x%x and mode 0x%x returns %d\n", pathname, flags, mode, fd);
+    return fd;
+}
+   int
+zos_fstat(int fd, struct stat* buf)
+{
+    int rc = fstat(fd, buf);
+    fprintf(stderr, "stat %d with buffer:%p returns %d\n", fd, buf, rc);
+    return rc;
+}
+   int
+zos_access(const char* pathname, int mode)
+{
+   int rc;
+   int acc;
+   FILE* testfp;
+   if (pathname[0] == '/' && pathname[1] == '/') {
+     if (mode == R_OK) {
+	testfp = fopen(pathname, "rb");
+	fprintf(stderr, "access check - open %s rb gives %p\n", pathname, testfp);
+        fprintf(stderr, "access %s with mode 0x%x returns %d\n", pathname, mode, ((testfp == NULL) ? -1 : 0));
+	if (testfp) {
+	    fclose(testfp);
+	    acc = 0;
+	} else { 
+	    acc = -1;
+	}
+     } else if (mode == W_OK) {
+	testfp = fopen(pathname, "rb+");
+	fprintf(stderr, "access check - open %s rb+ gives %p\n", pathname, testfp);
+        fprintf(stderr, "access %s with mode 0x%x returns %d\n", pathname, mode, ((testfp == NULL) ? -1 : 0));
+	if (testfp) {
+	    fclose(testfp);
+	    acc = 0;
+	} else { 
+	    acc = -1;
+	}
+     } else {
+	fprintf(stderr, "No code to support access %s with mode 0x%x for dataset\n", pathname, mode);
+     }
+   } else {
+     acc = access(pathname, mode);
+   }
+   return acc;
+}
+   int
+zos_read(int fd, char* buf, size_t count) {
+   FILE* altfp = fd2fp(fd);
+   int rc;
+   if (altfp) {
+	rc = fread(buf, 1, count, altfp);
+	fprintf(stderr, "read %d with buffer %p count %d returns %d\n", fd, buf, count, rc);
+   } else {
+	rc = read(fd, buf, count);
+   }
+   return rc;
+}
+   int
+zos_write(int fd, char* buf, size_t count) {
+   FILE* altfp = fd2fp(fd);
+   int rc;
+   if (altfp) {
+	rc = fwrite(buf, 1, count, altfp);
+	fprintf(stderr, "write %d with buffer %p count %d returns %d\n", fd, buf, count, rc);
+   } else {
+	rc = write(fd, buf, count);
+   }
+   return rc;
+}
+
+   int 
+isdataset(int fd)
+{
+    /* super hack */
+    if (fd == MVS_DATASET_MAGIC_FD) {
+	return 1;
+    } else {
+	return 0;
+    }
+}
+#endif
+
 #ifdef FEAT_X11
 
 # if defined(ELAPSED_TIMEVAL)
@@ -2700,6 +2897,15 @@ mch_FullName(
     if ((force || !mch_isFullName(fname))
 	    && ((p = vim_strrchr(fname, '/')) == NULL || p != fname))
     {
+
+#ifdef __MVS__
+    // Always treat //<name> as an MVS dataset an leave alone
+    if (fname[0] == '/' && fname[1] == '/') {
+	vim_strncpy(buf, fname, len+1);
+	fprintf(stderr, "Copied %s to %s\n", fname, buf);
+	return OK;
+    }
+#endif
 	/*
 	 * If the file name has a path, change to that directory for a moment,
 	 * and then get the directory (and get back to where we were).
