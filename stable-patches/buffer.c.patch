diff --git a/src/buffer.c b/src/buffer.c
index 58e9718e3..a77f8904e 100644
--- a/src/buffer.c
+++ b/src/buffer.c
@@ -26,6 +26,7 @@
  */
 
 #include "vim.h"
+#include <_Nascii.h>
 
 
 #ifdef FEAT_EVAL
@@ -71,6 +72,21 @@ static int	buf_free_count = 0;
 static int	top_file_num = 1;	// highest file number
 static garray_T buf_reuse = GA_EMPTY;	// file numbers to recycle
 
+
+#ifdef __MVS__
+int is_dataset(const char *filename) {
+  if (filename == NULL || strlen(filename) < 2) {
+    return 0;
+  }
+
+  if (filename[0] == '/' && filename[1] == '/') {
+    return 1;
+  }
+
+  return 0;
+}
+#endif
+
 /*
  * Return the highest possible buffer number.
  */
@@ -2101,6 +2117,87 @@ buflist_new(
     if (top_file_num == 1)
 	hash_init(&buf_hashtab);
 
+  // Dataset I/O
+#ifdef __MVS__
+    if (ffname != NULL)
+    {
+      if (is_dataset(ffname)) {
+         
+        __a2e_s(ffname);
+        struct DFILE* dsfile = open_dataset(ffname);
+        if (!dsfile)
+          return NULL;
+
+        if (read_dataset(dsfile)) {
+          return NULL;
+        }
+
+        curbuf->dsname = strdup(ffname);
+        curbuf->dsfile = dsfile;
+        curbuf->is_dataset = 1; // Maybe we can just check dsfile != NULL?
+
+        // Create a temporary file to represent the dataset 
+        // TODO add member well
+        ffname = vim_tempname('z', TRUE);
+        char* llq = strdup(low_level_qualifier(dsfile));
+        __e2a_s(llq);
+	      vim_snprintf(ffname, 256, "%s.%s", ffname, llq);
+        sfname = ffname;
+        
+        int temp_fd;
+        //TODO: Copy permissions from dataset?
+        if ((temp_fd = open(ffname, O_WRONLY | O_CREAT | O_TRUNC, 0666)) == -1) {
+          close_dataset(dsfile);
+          close(temp_fd);
+          return NULL;
+        }
+        __disableautocvt(temp_fd);
+
+        int length_prefix = has_length_prefix(dsfile->recfm);
+        int i = 0;
+        char* data = dsfile->buffer;
+        if (length_prefix) {
+          uint16_t reclen;
+          while (i < dsfile->bufflen) {
+            memcpy(&reclen, &data[i], sizeof(reclen));
+            i += sizeof(reclen);
+            if (write(temp_fd, &data[i], reclen) != reclen) {
+              close_dataset(dsfile);
+              close(temp_fd);
+              return NULL;
+            }
+            if (write(temp_fd, "\x15", 1) != 1) {
+              close_dataset(dsfile);
+              close(temp_fd);
+              return NULL;
+            }
+            i += reclen;
+          }
+        } else {
+          while (i < dsfile->bufflen) {
+            if (write(temp_fd, &data[i], dsfile->reclen) != dsfile->reclen) {
+              close_dataset(dsfile);
+              close(temp_fd);
+              return NULL;
+            }
+            if (write(temp_fd, "\x15", 1) != 1) {
+              close_dataset(dsfile);
+              close(temp_fd);
+              return NULL;
+            }
+            i = i + dsfile->reclen;
+          }
+        }
+
+
+        // Set to untagged? Rely on the zoslib heuristic for text
+        __chgfdccsid(temp_fd, 0);
+        close_dataset(dsfile);
+
+        close(temp_fd);
+      } 
+    } 
+#endif
     fname_expand(curbuf, &ffname, &sfname);	// will allocate ffname
 
     /*
@@ -2195,9 +2292,10 @@ buflist_new(
 
     if (ffname != NULL)
     {
-	buf->b_ffname = ffname;
-	buf->b_sfname = vim_strsave(sfname);
+      buf->b_ffname = ffname;
+      buf->b_sfname = vim_strsave(sfname);
     }
+   
 
     clear_wininfo(buf);
     buf->b_wininfo = ALLOC_CLEAR_ONE(wininfo_T);
