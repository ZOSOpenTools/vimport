diff --git a/src/bufwrite.c b/src/bufwrite.c
index bf79ad5bf..a43c8353a 100644
--- a/src/bufwrite.c
+++ b/src/bufwrite.c
@@ -12,6 +12,7 @@
  */
 
 #include "vim.h"
+#include <_Nascii.h>
 
 #if defined(HAVE_UTIME) && defined(HAVE_UTIME_H)
 # include <utime.h>		// for struct utimbuf
@@ -1898,6 +1899,21 @@ restore_backup:
 		    vim_free(wfname);
 		goto fail;
 	    }
+
+#ifdef __MVS__
+      if (newfile == TRUE)
+        __tag_new_file(fd);
+      else if (st_old.st_tag.ft_ccsid == FT_UNTAGGED) {
+        __setfdccsid(fd, 0);
+        struct f_cnvrt cvtreq = {SETCVTON, 0, 1047};
+        if (curbuf->needs_conversion)
+          fcntl(fd, F_CONTROL_CVT, &cvtreq);
+        __setfdccsid(fd, 0);
+      }
+      else
+        __chgfdccsid(fd, st_old.st_tag.ft_ccsid);
+#endif
+
 	    write_info.bw_fd = fd;
 
 #if defined(UNIX)
@@ -2510,6 +2526,84 @@ restore_backup:
 	}
     }
 
+#ifdef __MVS__
+  // copy from temporary file back to dataset
+  if (curbuf->is_dataset) {
+    struct DFILE* dsfile = open_dataset(curbuf->dsname);
+    if (!dsfile) {
+		  errmsg = (char_u *)_("error: cannot open dataset");
+		  buffer = NULL;
+	    goto fail;
+    }
+
+    curbuf->dsfile = dsfile;
+
+    int length_prefix = has_length_prefix(curbuf->dsfile->recfm);
+
+    // Read temporary file into record buffer
+    FILE* fp;
+    fprintf(stderr, "fname; %s\n", fname);
+    if ((fp = fopen(fname, "r")) == NULL) {
+		  errmsg = (char_u *)_("error: cannot open temporary file");
+		  buffer = NULL;
+	    goto fail;
+    }
+
+#define BUFFER_SIZE (1<<24) /* 16MB */
+#define DS_MAX_REC_SIZE (32768)
+
+    char line[DS_MAX_REC_SIZE] = {0};
+    char dsbuffer[BUFFER_SIZE] = {0};
+    int tot_size = 0;
+    uint16_t reclen = 0;
+
+    int linenum = 0;
+    while (fgets(line, sizeof(line), fp)) {
+       linenum++;
+       reclen = strlen(line) - 1; // ignore newline;
+       if (reclen > curbuf->dsfile->reclen) {
+         errmsg_allocated = TRUE;
+         errmsg = alloc(300);
+         vim_snprintf((char *)errmsg, 300, "Line %d exceeded record length of %d", linenum, curbuf->dsfile->reclen);
+         goto fail;
+       }
+       
+       __a2e_s(line);
+       if (length_prefix) {
+             if ((tot_size + sizeof(uint16_t) + reclen) > sizeof(dsbuffer)) {
+                fclose(fp);
+                errmsg = (char_u *)_("error: exceeded buffer length");
+                buffer = NULL;
+                goto fail;
+             }
+             memcpy(&dsbuffer[tot_size], &reclen, sizeof(uint16_t));
+             tot_size += sizeof(uint16_t);
+             memcpy(&dsbuffer[tot_size], line, reclen);
+             tot_size += reclen;
+         } else {
+             if ((tot_size + curbuf->dsfile->reclen) > sizeof(dsbuffer)) {
+                 fclose(fp);
+                  errmsg = (char_u *)_("error: exceeded buffer length");
+                  buffer = NULL;
+                  goto fail;
+             }
+             memcpy(&dsbuffer[tot_size], line, reclen);
+             memset(&dsbuffer[tot_size + reclen], 0x40, curbuf->dsfile->reclen - reclen);
+             tot_size += curbuf->dsfile->reclen;
+         }
+
+     }
+    fclose(fp);
+
+    curbuf->dsfile->buffer = dsbuffer;
+    curbuf->dsfile->bufflen = tot_size;
+
+    int rc = write_dataset(curbuf->dsfile);
+    close_dataset(curbuf->dsfile);
+}
+#endif
+
+
     // Remove the backup unless 'backup' option is set or there was a
     // conversion error.
     if (!p_bk && backup != NULL && !write_info.bw_conv_error
